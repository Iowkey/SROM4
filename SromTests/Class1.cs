using ConsoleApp1;
using NUnit.Framework;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace SromTests
{
    [TestFixture]
    public class Class1
    {
        

       // [Test]
       // [TestCase("11111100010111011010100111001110010010001001001101001001001101001010101100110011110010001111000100000100111000011011000111001110111111101011011101011001011000100101111111110010000001001100000001111001000110011011010011010011000101111010100",
       //        "01110111001111110100111101101110101101111100011111001100001100000001000010010011000111010100000101000100110000010101010101110100011110111111101110001000000111111010011110000110110010010001000100001110000011111110000100111101001101101111011",
       //        "10001011011000101110011010100000111111110101010010000101000001001011101110100000110101011011000001000000001000001110010010111010100001010100110011010001011111011111100001110100110011011101000101110111000101100101010111101110001000010101111")]
       // [TestCase("01111001001100011010111110001010111011100010001011011110010010000011011001101110111111101100001001100011101011100110111111011000010000110111101011100101011101011110100100011010111",
       //        "10010100001000010101011000100001000010001110000111100010110001101001111010000010000101001001101011111010100101010010100000001001101010000001111001000110110001011011100101111010010",
       //        "11101101000100001111100110101011111001101100001100111100100011101010100011101100111010100101100010011001001110110100011111010001111010110110010010100011101100000101000001100000101")]
       // [TestCase("00101110000010000000000011000011001100111011011010110111110000111001000001100001011010001011100011010110011100110101100011110111000001011010011000100100110111101011110010100100011111101101011111100100110011010100100010011001110001100100000",
       //        "11010010111110000001101100100101100111100111101110010110000001011111101111100010101100001101111101101000010000110011111000100010010001000101111100110110111101111100111011000010011110111011100110010001011010101001100110111101111100110111011",
       //        "11111100111100000001101111100110101011011100110100100001110001100110101110000011110110000110011110111110001100000110011011010101010000011111100100010010001010010111001001100110000001010110111001110101101001111101000100100100001101010011011")]
       // [TestCase("11110111011011100001010011010000101110101010110000101001100101010000011000010011100000101111110010110011111111110101111000011000010010110110011101001111111001011010010110101",
       //"0",
       //"11110111011011100001010011010000101110101010110000101001100101010000011000010011100000101111110010110011111111110101111000011000010010110110011101001111111001011010010110101")]


       // public void AddTest(string pol1, string pol2, string expectedResult)
       // {
       //     var a = Program.BinToArr(pol1);
       //     var b = Program.BinToArr(pol2);
         
       //     var actualResult = Program.ArrToBin(Program.Addition(a, b));
       //     Assert.AreEqual(expectedResult, actualResult);
       // }

       // [Test]
       // [TestCase("01011011001100001000101111111011110101100011000011110000010001000100101110110000100011010001010100101111001110010110011010011011100001010110101100111111011000011111010001100110101000011101010111100100101011101011011101001101011100110001100",
       //         "11000011101010010001001111011010011010110011011000000111100000110111000010101101011111001011101100110000100010110100001101010101010001110110000000001001010010111011011000000010111110100100010100111110101111001111100011100111110010010100001",
       //         "00011100111011101111010101001000101011010011110110000110101000101111000011011000011111110111010100000100001010111000010101100101001100101001101111000011110111101001111100001000001000101101011011110111101010110011000000010100100100001110011")]
       // [TestCase("00110010011111110001100100110010011010011001000110010110000011001110101000001101010111001101001111100100010010111000001111000110000001110100001010011011000000101010000000101011000111101001011000101001110110011100011011000100100000111100100",
       //         "01001100101010110100111000010011010010110001000101111100110010111111011111110110111001111111101011110000001000001101000001101100111110110100000111101000011001000001100010111110100100010001111010011000101011001100001000000111101000001000000",
       //         "00110001101010001010111001111000000110100110100001011111110010001000110100010010110111001001111001011110100100000110110000101011000000010011001111011101000010100011000111011100000011100010101001100001000001110000100111100010101010101011010")]
       // [TestCase("00100011101010111001010001010000101100101101110100110010011110101010001010010010100110000010000111011000010110011011011001010000011001000100111111101111010011101010011011100111100000000100101010001111101101011111100000101010010100100100101",
       //         "01100000001111010010111001010110110000011011111110111111110100100000010100010011001101101000011011100110010100100111110111001001101101111001101100011001101101100111011111010111001001000000100011110011011110111011100111001111100001000011001",
       //         "00101001111111110011011000011011100101111000001010100001010101101110011011100101101000101001011011111101111111111110111110011100000101010110010001101001010100100100100100000011001100011010110010011101001101001010110110100111111010011000010")]
       // [TestCase("01011010010100100100111110100110111011110111000000011111101010110001110010101011100000011100011010010111101111001110011110111101101101111001011111101100100011001111111101110101011001101101101010101000010111101010000111101010001011011001011",
       //         "11010110111001111111010000011101100100001100000000011010010000010111110011001000111011011001011100110011011001010010110001011001011010110111110011101101000111111011101100111011000010101011011101000100011100111111001010000011111110001000000",
       //         "00000001100100011100101111011111001011110101010110010100111111010001001001000000000000001100101100001100001101000111001001100100001101110111001011011010011010000010101111011001101110101111011000000110111011010101001100100101000101111000101")]
       // public void MultiplicationTest(string pol1, string pol2, string expectedResult)
       // {
       //     var a = Program.BinToArr(pol1);
       //     var b = Program.BinToArr(pol2);

       //     var actualResult = Program.ArrToBin(Program.Multiplication(a, b));
       //     Assert.AreEqual(expectedResult, actualResult);
       // }

       // [Test]
       // [TestCase("00111011100101111000110101000010011111110000000101010111100001000101010010001101000000110000100011101000010011010000011111011011010111011010111011101101010111110000101000101110000001101100110000000001011110100110010001011001011001011101001",
       //         "00010010111100101110111111101010111010111001111101010000100111100110001000000001000010001010111111010101010010001100100011110010011111110111000101000001101101010000101010011001001000011110100110101101010010000111100100010111101100100011001")]
       // [TestCase("11100101001011110111010101010000000000000011001110011001000100101101101010100100110110000010101011111110011011100110011100010110100101111101000111000001111000010111111111010101011011100000111101101110001100001001001100011010101001111110011",
       //         "10101110110101111011011110101001010010110111011111011111000000001010100010000010001100010001000011101110110011011010010110010101100101001111111101111110111110111011011001100010000101111111010100100000001001000110111110100100011010100001100")]
       // [TestCase("01111100100101111010100111111100101000101011001101110110010100110001010010100100101111001101001010101001011100001000101110101011111111100111011001000010101011000000000100010010000000111100001010001101111011110110001000001011011001001010101",
       //         "11101000000110011100111111100000011111011110010010000000101100011101110010110111010100011001000111100011011011001111011110010001100011010111101111011110111100010101100000011001000111110011111101010111011001011100101110000011100010010100111")]
       // public void SquareTest(string pol1, string expectedResult)
       // {
       //     var a = Program.BinToArr(pol1);
       //     var actualResult = Program.ArrToBin(Program.Square(a));
       //     Assert.AreEqual(expectedResult, actualResult);
       // }

       // [Test]
       // [TestCase("01000100001010101110000111010010000001001001001010101111001010100010001010100100010000010110000111111000010000011001101011111010000011011111100101000001101111001010100111011011111010001000011111111100000101101010001100011111101101001100100",
       //         "1")]
       // [TestCase("11110010100111110100111001101010011011000010101001000001101001010100100110101110001001111010110000011001010110000111010101100001100111101110001111110100000100011111000101010010010110001110110110101010101101100101001000101001101110001101101",
       //         "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000")]
       // [TestCase("11000100111001000010001111011100101100001100100111000100011011101000111011101111101100001000111000111110100100110100011010010110000110011101110101000011000010011100101011100110100111100010101101000100000111011000001100000111110100100010000",
       //         "1")]
       // public void TraceTest(string pol1, string expectedResult)
       // {
       //     var a = Program.BinToArr(pol1);
       //     var actualResult = Program.ArrToBin(Program.Trace(a));
       //     Assert.AreEqual(expectedResult, actualResult);
       // }

       // [Test]
       // [TestCase("01110010101110011000110010001010111001000100111100101110010000001000011101111100001100000110111100111000011010001100011111001110111011101101011101011010101111011001011101010111001111000010010111100010111100100000011110111010100110111111010",
       //         "10001010101110101011000101110110011001110111101010011100100110000011000010001110110101011000111110010011011001011010010110000000000110110110100111001010001111101110011011010001110001100101011101111100100000011000110101111110111110111010100",
       //         "00010001000011011011010100110001010110110101101111000011110101010100111111010010001111001111010001001110100111110001100001110011000000110100011111101000010000000101100111101010101011101001111110101101110001111010010001011000100111010010110")]
       // [TestCase("11011001101111010100111000111010001110000000110100101011001101001100101010010010110101101010111001011000100001001000010110011011101011010111100110101010000101100110011111011000001001101100101010110101100010111100110000101001000100110110000",
       //         "00110001110111011000010100001111101111010011110111000001101100111101111101000010110111111010011010111001101001110101100100000010110010110011111010011011011101111100001100010101111101000100000000010010101011100001100101000110011100000000011",
       //         "10111001010011001101001111100101110000001111001000101001010001111100001100000010110011010111100100101010001110111000011001010111010110001011000111110100110010101001110101110110001100100100010011010011101011101011111110111110110010001011000")]
       // [TestCase("00101010000000001100101111010011110100011010001011010001001110000111011101010010011111101000110011011111110010110110110100110000101100000111101000101111111101001010001011010101000000111100110111011111001001111100000000111101101111100001100",
       //         "10011010101111001010111000011001001011110001110101101100001110010100000100000010000010010000010011000011111010011100100100110001011000010000110101101011010101111111101001110010001000001011100101000110101011101101110111110100101000010100100",
       //         "00010100000000101001010101001110101010100101000111110101001110101011101011100000110000100001111000000111010100100101111111100100010001000110110111001110010001011100111100001000101110101101011111001100111111011011001000000010001111100100000")]

       // public void PowerTest(string pol1, string N, string expectedResult)
       // {
       //     var a = Program.BinToArr(pol1);
       //     var n = Program.BinToArr(N);
       //     var actualResult = Program.ArrToBin(Program.Power(a, n));
       //     Assert.AreEqual(expectedResult, actualResult);
       // }

       // [Test]

       // [TestCase("00111001011001101111101010101001011000100010101001000000011011100011101000011010010010110101110101001010110100001010100101011000011000010100100101100011101111000111011001111101101010111101000101001111100101011110010111110110000110101101100",
       //         "10101100110100110100100111101011110011100100101011001001010100110101011000000011101101110110010100110000101001111110000000100010000001100111000101011100010101101000000000000100010010001010001011110111011001101110101101000010101010101000100")]
       // [TestCase("00010110000110110101010010000101111110101000010000001101011101000011100100100000001111001011000001100000000101010000000100110000100010011010010110010001010000101010110111001100100000101101101101101001000110101011011000000001101001001001101",
       //         "11010110011100110110100110101010110100010001111001100010011011101110101111101111010011101011100001000100110001100101011101110010111101000010100101110110011101011000110110111001110110010111010011100101010100010011000101001100011101010110001")]
       // [TestCase("11101010101010001010111100110010100100100011010011101000111100010111001001100000001101011001100001001001000100010000100110001011100111000110101001000111001011111010010110001010000101011000001010001100111010101111100111001111101110110101100",
       //         "00001100111001010111111111110010011000010000000001000101101100011000000110000111000110101110010000100001011110011100000101000010011000101011111101100100110100000110001000100101101001010111010110001001100010101001010101000101011111010110011")]
       // [TestCase("10111011111110011011010000001101010011110101111011110010110110101010000110101101001001011101010101111001111100010100110011100011010100101101101001101111111010010001011010011111011011110010101000000001101110010111101111101111111111110100010",
       //         "00111100101110001000010001010000000101011010000010000111100011000000001101011000010111101011100111010011111010100110011001111000001100111110011100001101011110100101101101000010110111000010100110100100001010000101010111001000000110001000001")]

       // public void InverseTest(string pol1, string expectedResult)
       // {

       //     var a = Program.BinToArr(pol1);
       //     var actualResult = Program.ArrToBin(Program.Inversed(a));

       //     Assert.AreEqual(expectedResult, actualResult);
       // }

        [Test]

        [TestCase("01111100110111000101011110100010011101001000110100110110011011011111011111010100111111101000111110100001100101011011011111000100010010100010111011001001010000111001001110101101001111100011101111101011111100111011101011111000011000110001110",
                "10111010011010011101011101111000010111000100001111101101000111000101011011001001101100011011001011001001111111101110111001011001000000111100111110110101011111110001010101000100111101010110110001010001001010101110001010011000110000100110001",
                "11000110101101011000000011011010001010001100111011011011011100011010000100011101010011110011110101101000011010110101100110011101010010011110000101111100001111001000011011101001110010110101011110111010110110010101100001100000101000010111111")]
        [TestCase("11001100100010110101111001101100001011011110000001011100110000100000011110111001010111000100111001010010101100010010110001101001001110000011111100000111011000001111101101000000101000011010100111100000001101110010011110110100001000100010110",
                "01100110111111001101111011110011101000010011101100101000100101011111100011101111011011011001010010011111001001011000000011000000110010111101111000111110110000100110001011110010100111001110111101000001001001010000001101010110101010110001110",
                "10101010011101111000000010011111100011001101101101110100010101111111111101010110001100011101101011001101100101001010110010101001111100111110000100111001101000101001100110110010001111010100011010100001000100100010010011100010100010010011000")]
        [TestCase("11100010101111110010001000011100011110010011001010111101111100101010100101101010011000101010011111001001111011010010000000101110011100111001110100101111111100111010110010011010011111001110010101110100101011000110000111100111101110111011001",
                "10000111010100101110001110110010100111011101000000010100010111110000101001101010111010110101111111000000101011110101110010011111111011101001101110111010010111000000010011001000000011111111010100110011110010001110110001010011010001001100010",
                "01100101111011011100000110101110111001001110001010101001101011011010001100000000100010011111100000001001010000100111110010110001100111010000011010010101101011111010100001010010011100110001000001000111011001001000110110110100111111110111011")]
        [TestCase("01000000101011111010101011111001011011110011010000101011011010111000111010010100000011001000011100101000001010011001010011001011010111000011100111010100101011101001000000111010111001001000100100111001101010000010101101001000100001110001011",
                "00000110011100111110010001100111111101111011101011011010111111101011011111010111110111110011100011101001011010110011111100110110101010100111000001110110111000101101000111111000100110111010001001011010011000001110101110101101011010111011110",
                "01000110110111000100111010011110100110001000111011110001100101010011100101000011110100111011111111000001010000101010101111111101111101100100100110100010010011000100000111000010011111110010101101100011110010001100000011100101111011001010101")]

        public void NBAddtionTest(string pol1, string pol2, string expectedResult)
        {

            var a = Program.BinToArr(pol1);
            var b = Program.BinToArr(pol2);
            var actualResult = Program.ArrToBin(Program.NBAddition(a, b));

            Assert.AreEqual(expectedResult, actualResult);
        }

        [Test]

        [TestCase("11001000100010000001101011111111010101010111011000100101111111000011001110001100010110010100110010100010101000011010001100000010001000100100101110011001111001111101000101100101101011001101000110101001110011010100000010110010011000101110100",
                "01100100010001000000110101111111101010101011101100010010111111100001100111000110001011001010011001010001010100001101000110000001000100010010010111001100111100111110100010110010110101100110100011010100111001101010000001011001001100010111010")]
        [TestCase("10010001001011100011111101011000101011010001100001000011110001101011111101011111100111101111101001010010011100100000010000110000101011011111101100110101001111111101010000000010100111011101110001110110011010101111001001001101101101101111110",
                "01001000100101110001111110101100010101101000110000100001111000110101111110101111110011110111110100101001001110010000001000011000010101101111110110011010100111111110101000000001010011101110111000111011001101010111100100100110110110110111111")]
        [TestCase("00001111100010010111001111000000000100000000101001001101001110000101001111011100000100101011001111011001001111000011000000111010010111011111000100101100101000001110001110111010101001010001101110011001001100110111100101000001101000111110001",
                "10000111110001001011100111100000000010000000010100100110100111000010100111101110000010010101100111101100100111100001100000011101001011101111100010010110010100000111000111011101010100101000110111001100100110011011110010100000110100011111000")]
        [TestCase("01001101100110000111000011001001111100100110110111001111110000010111101011011101001100011000011000001110101100111010100011001001110101010011010111011100011100001011011010110000111010101011101011000101111001100111001110100000100000111111011",
                "10100110110011000011100001100100111110010011011011100111111000001011110101101110100110001100001100000111010110011101010001100100111010101001101011101110001110000101101101011000011101010101110101100010111100110011100111010000010000011111101")]

        public void SquareTest(string pol1, string expectedResult)
        {

            var a = Program.BinToArr(pol1);
            var actualResult = Program.ArrToBin(Program.Square(a));

            Assert.AreEqual(expectedResult, actualResult);
        }


        [Test]

        [TestCase("10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001",
                "0")]
        [TestCase("10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000100000101",
                "1")]
        [TestCase("10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111110000000000000000000100000000000000000000000000000100000101",
                "1")]       
        public void TraceTest(string pol1, string expectedResult)
        {

            var a = Program.BinToArr(pol1);
            var actualResult = Program.Trace(a);

            Assert.AreEqual(expectedResult, actualResult);
        }

        [Test]

        [TestCase("11101010101111010100110000001100001001101011011010011100000011000011101001010011010001011101010101101010010010001010101000110100000100101111000010110111001001011100011111011101101110000111111111111000101100001010101011110011000111110000100",
                "01101110101110110100010111001100010100100011010110000011101000100011110001110101001011001011001010000111010100111111110010110011010101101001001010011000000101010110110111000010110001101101111011000001100100111001011100010010001011101011001",
                "10111001111110100111011010101111100000011011010101011100010000111101110000001011101010011000011111010110010101011100010100110001001101100011110101010111000101010100000111111011001010001011000001011101000000110100110101110101111010001100100")]
        [TestCase("10110001010110111011001100111100111111011100011011110011011111101010110011110111101110100000011010000111100000000100000100011001110111000011111111101101111110100100011001110100110100100001110100100111101101101011100111111001011001001111010",
                "11011000111100001100100101010010011011010101010111111001100001011000011100111010110111111100001001111001010011010010100110101000111001000010011100011011001010101011101100110111110001100000011000011100010100010110001111111011001011001101100",
                "00000000110000111110101001100111111111110011001010011110111001001100100011101001110000100100011111111000111001110001011010001111111010101000000110100011101000100110011001010011110001101100010100001001000100011011110011000111001111110110110")]
        [TestCase("00101101111100010011001001101011100000000101000001001101011100000111101100111010000011101001101000001010100011110111111110100011011011100001101001000100111010011101011001010011100101100011011000001010000001011111111000011101010111100101110",
                "00011010101001100011111000010101001011110110110010000101000110011001111101111011111000111010101101001111001111110001011010111101110110101110011111101011000000100101010110111111011110101000001000010110101110111111001111110001100011001011110",
                "00010110000010011101001110001111111101101101101000101011001101000100100110011111010101000011101001001001000000010101111001111011000000110000000101110101111101101010101111000100101011101000100110010010000110010100011010001000100000111110000")]
        [TestCase("10010000110000100110001010110010010101111001101110010101110100010101010000110001100110101011100110100001111101111110100010110011110001101001000101110000111010000001110001100101001101011110110100000011010101001111101100001100101101010010110",
                "11111000011010011000001111011010011110110011010101011101101110110110010111101001101110111111001101010100010100011000010111101011011100011101111110111111100001111000101101010110000000000000101010001101100001101001010000000110001010111101110",
                "01100100000111110010111010101101001100000010101011011011000011110011001011011111001011010001110010000010100111011011011111001011001110010010110011101111110000001000101100000001101001111101101001011101001011011110011101100000000000101000110")]

        public void NBMultiplicationTest(string pol1, string pol2, string expectedResult)
        {

            var a = Program.BinToArr(pol1);
            var b = Program.BinToArr(pol2);
            var actualResult = Program.ArrToBin(Program.NBMultiplication(a, b));

            Assert.AreEqual(expectedResult, actualResult);
        }

        [Test]

        [TestCase("01010010010111111001001111111110010100000001011111100000000010111001111110001011111100110000111101110011101101101010110101000111011011001001000101001011000010000101111110100111100101001101101100100111111001100111101011111110101001111111110",
                "10011100001000100110000110110110100101101011110100000110110001010100010110111001011000111111110000011100100110111010011011000111011110110110011010011110101011110100100011111100000111111001111111011101111110010100101100110000111101011010001")]
        [TestCase("00111011011010011010110010001010010011000111110111000111110101101100101111000111100011111001010001101100110111101001010001111001100000011011101111101110100001100101100000011111001101010100111001010010001110110011011010010011100111100000101",
                "01010010010101101000001100111110011101000000000011110111100000110101011010011010011010111110111100110010010110000110011100111010110111101111100100001010011000101001100111011101011010101111100010010111010100101101011000000000000011001010111")]
        [TestCase("10101110100011000010100010110010000001001101010001111110101101001011101110101111001010101101010111010001010110010110100100100000100111101010100101100100000110010110000001101101001100101000111111110110110001000110010111101110100001000110110",
                "10001111011101000110110100000100111010010111110010101001010011011110011001111110001001010000000100100100000100100010111000110011010010010001111101100110110001111110001100101101010000100110011011100010010000000101101010011000110101000101001")]
        public void InversedTest(string pol1, string expectedResult)
        {

            var a = Program.BinToArr(pol1);
            var actualResult = Program.ArrToBin(Program.Inversed(a));

            Assert.AreEqual(expectedResult, actualResult);
        }

        [Test]

        [TestCase("10011100101101100111001001000001100100111110100100111000011001100100100110010110100111101000011010111110110011100000011011110100110011010111100101100000011000111011010101011110000010000110011001100101011111101010101100101010011101000110001",
                "11110111100111110011000001101110110001011111011111110110011011111010110111110111001001110100100110001110000100111011001011011111100111101110000111100010011010111101001111010100101010100100110101011001100000001110110101101101100101001000101",
                "11001001100100111011011010000100110011101000000110000011000011011000011100010100111100001011010011100111111000001100011100111110111010010010011101100100010011100000000000101010111011010110110011001100110101001100000011001010000101100010010")]
        [TestCase("11010101101010011101010001111111011010111000001100011010100011111111110011100111101010111001000000111110011111000001110101001010011101001111111001000011000011101001101001101001001110101001100000101100010000000111101110010010110010100001100",
                "11001100000110011001011001001110101011110111010001111010101011001011101100101100000001111101110100000100011101010100111111110000000010101010100100100010111101101101010000010101101101000000001100000111001111011111100100101011001010011011001",
                "10011111100110110100110000101011011110000111100011110010110110100111011011111000100001010110110001100111100010101001001010010011110100001011000000100010111101001100100001001110010011000010001100111011000001000001111000100000100111001010111")]
        [TestCase("00000010011110110001000011100101100101110101001100000011110001110010110001000111001110000000001100011111000101010110001010001011110100101110111111001101010111111101000010101010001101100100111101001111011100000000111101000110111011001101000",
                "00111111110010110101001010111000101000110011001000010010010011100100100001001100101100111001001110111111011111100001000001000010010011101101001110000001000011000111010110110100010001100111111100100101010100111110111101011011101000000000010",
                "11111100000001001110100010001110000101000111111000010111100100110011110101011011001000100111001011101100001111111011111110011111101010011101100011010101110000101011011011110111001011011000100011010001000111011001001001001101101100001101111")]
        [TestCase("01010100000011000111001000100101101001101001010001001001011100001011111111011101110111110100101000110100010000100010111001111010010101101000111100000111010111001010010011100010101101100001001010010111101011111010101110010000110100111001010",
                "01001100011101010011110110011111101111001100000100100100110001111001011010111101100001000110011011100000001010001110010000111110011001011111001111101101001100100110011010001001011010000110001110001111101011001011110100100010000000000101000",
                "01110011011101100001000010111010110100010011000100101000000011100110010011000101010010100101111100111101001111000010111011011011001100110100110100111101101101101100100000100101101101001000000100011001100101001101110100011000011010100001001")]

        public void NBPowerTest(string pol1, string pol2, string expectedResult)
        {

            var a = Program.BinToArr(pol1);
            var n = Program.BinToArr(pol2);
            var actualResult = Program.ArrToBin(Program.NBPower(a, n));

            Assert.AreEqual(expectedResult, actualResult);
        }
    }


}
